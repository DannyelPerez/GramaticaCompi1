//TODO: Agregar declarationList como parte de los statements
// revisar constant-expression
//assignment-expression
//enum
//struct

program -> statementList

statementList -> statement statementList
				| Epsilon
				
statement -> basicStatements
			| declarativeStatements
			
basicStatements -> expressionStmt
		  | compoundStmt
		  | selectionStmt
		  | IterationStmt
		  | Jumpstmt
		  | varDeclaration
		  |	includeStmt

includeStmt -> #include String_Constant

declarativeStatements -> varDeclaration
					| funDeclaration
					| structDeclaration
					| enumDeclaration
			
enumDeclaration -> enum { enumerators }

enumerators -> enumerator
             | Epsilon

enumerator -> Id enumerator_assign

enumerator_assign -> = literal enumerator_chain
				   | enumerator_chain

enumerator_chain -> , enumerator
                  | Epsilon
				  
structDeclaration -> struct Id { structParams }

structParams -> structParamsList
		| Epsilon
		
structParamsList -> param structParamsList'

structParamsList' -> ; structParamsList

//int a,b,c;
varDeclaration -> typeSpecifier const-list pointer-list varDeclList;
			    | const-list typeSpecifier pointer-list varDeclList;


varDeclList -> varDeclInitialize varDeclList'
			
varDeclList' -> , varDeclList
			| Epsilon

varDeclInitialize -> varDeclId isArray varDeclInitialize'

varDeclInitialize' -> = assignment-expression
					| { varDeclInitialize-list }
					| { varDeclInitialize-list ,}
					| Epsilon
					
varDeclInitialize-list -> varDeclInitialize varDeclInitialize-list'

varDeclInitialize-list' -> , varDeclInitialize-list
						| Epsilon
					
varDeclId -> Id varDeclId'

varDeclId' -> [ NumConst ]
			| Epsilon

typeSpecifier -> Int
			 |	Float
			 | Bool
			 | Char
			 | Date
			 | String
			 | Void
			 
funDeclaration -> typeSpecifier Id ( params ) statement
params -> paramsList
		| Epsilon
		
paramsList -> param paramsList'

paramsList' -> , paramsList

param -> typeSpecifier const-list pointer-list Id isArray
	  | const-list typeSpecifier pointer-list Id isArray

isArray -> []
		| Epsilon

pointer-list -> * pointer-list
			 | Epsilon

const-list -> const const-list
			| Epsilon


expressionStmt -> expression ; 
				| ;
				
compoundStmt -> { basicStatementsList }

basicStatementsList -> basicStatements basicStatementsList
					| Epsilon


		  		
labeledStmt -> case constant-expression : basicStatementsList
            | default : basicStatementsList				 
				 
				 
IterationStmt -> whileStmt
			  | doWhileStmt
			  |	forStmt
				 
selectionStmt -> ifStmt
			  | switchStmt
				 
Jumpstmt -> break ;
		| return expressionStmt ;
		| continue ;
				 					 	 
ifStmt	-> if(expression) ifStmt'

ifStmt' -> basicStatements ifStmt''

ifStmt'' -> else basicStatements
		| Epsilon
					  
switchStmt -> switch(expression) basicStatements
		   
whileStmt -> while(expression) basicStatements

doWhileStmt -> do basicStatements while(expression);

forStmt ->	for( forExpressionStmt ) basicStatements

forExpressionStmt -> expression ; expression ; expression
				   | assignment-expression : Id




				   
				   
				   
expression ->	assignment-expression
		   |	expression , assignment-expression
		   
assignment-expression ->	Conditional_Expression
					 |	Unary_Expression Assigment_Operator assignment-expression
					 
Assigment_Operator -> 	=
				   |	*=
				   |	/=
				   |	%=
				   |	+=
				   |	-=
				   |	<<=
				   |	>>=
				   |	&=
				   |	^=
				   |	|=
				   
Unary_Expression -> Postfix_Expression
				 |	++Unary_Expression
				 |	--Unary_Expression
				 | Unary_Operator Unary_Expression
				 
Unary_Operator ->	&
			   |	*
			   |	+
			   |	-
			   |	~
			   |	!
				 
Postfix_Expression -> 	Primary_Expression
				   |	Postfix_Expression [expression ]
				   |	Postfix_Expression ( assignment-expression_List )
				   |	Postfix_Expression . Id
				   |	Postfix_Expression -> Id
				   |	Postfix_Expression ++
				   |	Postfix_Expression --
				   
assignment-expression_List -> assignment-expression assignment-expression_List
						  | Epsilon
				   
Primary_Expression -> Id
				   | Constant
				   | ( expression )
				   
Constant -> Int_Constant
		 | Char_Constant
		 | Float_Constant
		 | String_Constant
		 | Date_Constant
		 | true
		 | false
				   
Conditional_Expression -> 	Logical_Or_Expression
					   |	Logical_Or_Expression ?expression : Conditional_Expression
					   
Logical_Or_Expression ->	Logical_And_Expression
					  |		Logical_Or_Expression || Logical_And_Expression

Logical_And_Expression ->	Inclusive_Or_Expression
					   |	Logical_And_Expression && Inclusive_Or_Expression

Inclusive_Or_Expression -> 	Exclusive_Or_Expression
						|	Inclusive_Or_Expression | Exclusive_Or_Expression

Exclusive_Or_Expression -> And_Expression
					    | Exclusive_Or_Expression ^ And_Expression
						
And_Expression ->	Equality_Expression
			   |	And_Expression & Equality_Expression
			   
Equality_Expression ->	Relational_Expression
					|	Equality_Expression == Relational_Expression
					|	Equality_Expression != Relational_Expression
					
Relational_Expression ->	Shift_Expression
					  |		Relational_Expression < Shift_Expression
					  |		Relational_Expression > Shift_Expression
					  |		Relational_Expression <= Shift_Expression
					  |		Relational_Expression >= Shift_Expression
					  
Shift_Expression ->	Additive_Expression
				 |	Shift_Expression << Additive_Expression
				 |	Shift_Expression >> Additive_Expression
				 
Additive_Expression -> 	Multiplicative_Expression
					|	Additive_Expression + Multiplicative_Expression
					|	Additive_Expression - Multiplicative_Expression
					
Multiplicative_Expression -> 	Unary_Expression
						  |		Multiplicative_Expression * Unary_Expression
						  |		Multiplicative_Expression / Unary_Expression
						  |		Multiplicative_Expression % Unary_Expression
