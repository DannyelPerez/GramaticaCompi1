Codigo -> Lista_Sentencias

Lista_Sentencias -> Sentencia Lista_Sentencias
				 | Epsilon

Sentencia -> Sentencia_Basica
		  |  Sentencia_Declarativa
		  
Sentencia_Declarativa -> Sentencia_Struct
					  |	 Sentencia_Enum
					  |	 Sentencia_Funcion
					  
Sentencia_Basica -> Selection_Sentence
				 |	Loop_Sentence
				 |	Jump_Sentence
				 |	Expression_Sentence
				 |	;
				 
Expression_Sentence -> 	Expression
					|	Epsilon
				 
Loop_Sentence -> Sentencia_Basica_while
			  |	 Sentencia_Basica_do_while
			  |	 Sentencia_Basica_for
				 
Selection_Sentence -> 	Sentencia_Basica_if
				   |	Sentencia_Basica_switch
				 
Jump_Sentence -> break ;
			  |  return Expression_Sentence ;
			  |  continue ;
				 
Lista_Sentencias_Basicas -> Sentencia_Basica Lista_Sentencias_Basicas
						 | Epsilon
						 
						 
Sentencia_Basica_if	-> if(Expression) Sentencia_Basica_if'

Sentencia_Basica_if' -> Sentencia_Basica Sentencia_Basica_if''
					 |  {Lista_Sentencias_Basicas} Sentencia_Basica_if''

Sentencia_Basica_if'' -> else Sentencia_Basica_Single_Or_Block
					  |  Epsilon
		   
Sentencia_Basica_Single_Or_Block -> Sentencia_Basica
								 |  {Lista_Sentencias_Basicas}
						
Sentencia_Basica_while -> while(Expression) Sentencia_Basica_Single_Or_Block

Sentencia_Basica_do_while -> do Sentencia_Basica_Single_Or_Block while(Expression);

Sentencia_Basica_for ->	for( conjunto_expresiones_for ) Sentencia_Basica_Single_Or_Block

conjunto_expresiones_for ->	Expression_Sentence;Expression_Sentence;Expression_Sentence
						 |	sentencia_basica_decl_var : Identificador

Sentencia_Basica_switch	->	switch(expresion){Lista_Sentencias_Case}

Lista_Sentencias_Case -> Sentencia_Case Lista_Sentencias_Case
						|  default: lista_sentencias_basicas
						|  Epsilon
						
Sentencia_Case -> case Conditional_Expression: lista_sentencias_basicas

Expression ->	Assigment_Expression
		   |	Expression , Assigment_Expression
		   
Assigment_Expression ->	Conditional_Expression
					 |	Unary_Expression Assigment_Operator Assigment_Expression
					 
Assigment_Operator -> 	=
				   |	*=
				   |	/=
				   |	%=
				   |	+=
				   |	-=
				   |	<<=
				   |	>>=
				   |	&=
				   |	^=
				   |	|=
				   
Unary_Expression -> Postfix_Expression
				 |	++Unary_Expression
				 |	--Unary_Expression
				 | Unary_Operator Unary_Expression
				 
Unary_Operator ->	&
			   |	*
			   |	+
			   |	-
			   |	~
			   |	!
				 
Postfix_Expression -> 	Primary_Expression
				   |	Postfix_Expression [ Expression ]
				   |	Postfix_Expression ( Assigment_Expression_List )
				   |	Postfix_Expression . Identificador
				   |	Postfix_Expression -> Identificador
				   |	Postfix_Expression ++
				   |	Postfix_Expression --
				   
Assigment_Expression_List -> Assigment_Expression Assigment_Expression_List
						  | Epsilon
				   
Primary_Expression -> 	Identificador
				   |	Constant
				   |	String
				   |	( Expression )
				   
Constant -> Int_Constant
		 |	Char_Constant
		 |	Float_Constant
		 |	Bool_Constant
		 |	Enum_Constant
				   
Conditional_Expression -> 	Logical_Or_Expression
					   |	Logical_Or_Expression ? Expression : Conditional_Expression
					   
Logical_Or_Expression ->	Logical_And_Expression
					  |		Logical_Or_Expression || Logical_And_Expression

Logical_And_Expression ->	Inclusive_Or_Expression
					   |	Logical_And_Expression && Inclusive_Or_Expression

Inclusive_Or_Expression -> 	Exclusive_Or_Expression
						|	Inclusive_Or_Expression | Exclusive_Or_Expression

Exclusive_Or_Expression -> And_Expression
					    | Exclusive_Or_Expression ^ And_Expression
						
And_Expression ->	Equality_Expression
			   |	And_Expression & Equality_Expression
			   
Equality_Expression ->	Relational_Expression
					|	Equality_Expression == Relational_Expression
					|	Equality_Expression != Relational_Expression
					
Relational_Expression ->	Shift_Expression
					  |		Relational_Expression < Shift_Expression
					  |		Relational_Expression > Shift_Expression
					  |		Relational_Expression <= Shift_Expression
					  |		Relational_Expression >= Shift_Expression
					  
Shift_Expression ->	Additive_Expression
				 |	Shift_Expression << Additive_Expression
				 |	Shift_Expression >> Additive_Expression
				 
Additive_Expression -> 	Multiplicative_Expression
					|	Additive_Expression + Multiplicative_Expression
					|	Additive_Expression - Multiplicative_Expression
					
Multiplicative_Expression -> 	Unary_Expression
						  |		Multiplicative_Expression * Unary_Expression
						  |		Multiplicative_Expression / Unary_Expression
						  |		Multiplicative_Expression % Unary_Expression
							
